from tkinter import *
import math
# ---------------------------- CONSTANTS ------------------------------- #
PINK = "#e2979c" # hex code
RED = "#e7305b"
GREEN = "#9bdeac"
YELLOW = "#f7f5dd"
FONT_NAME = "Courier"
WORK_MIN = 25
SHORT_BREAK_MIN = 5
LONG_BREAK_MIN = 20
reps = 0
actual_timer = None # necessary because this function, created below, is local
# ---------------------------- TIMER RESET ------------------------------- # 


def reset():
    global reps
    reps = 0
    window.after_cancel(actual_timer) # stops countdown function from continuing
    canvas.itemconfig(timer_text, text="25:00")
    timer_label.config(text="Timer")
    cycle_counter.config(text=" ")
# ---------------------------- TIMER MECHANISM ------------------------------- #

def start_timer():
    global reps

    if reps == 8:
        reps = 1
        countdown(60 * LONG_BREAK_MIN)
        timer_label.config(text="Break Timer")
    elif reps % 2 != 0:
        reps += 1
        countdown(60 * SHORT_BREAK_MIN)
        timer_label.config(text="Break Timer")
    elif reps % 2 == 0:
        reps += 1
        countdown(60 * WORK_MIN)
        timer_label.config(text="Work Timer")


# ---------------------------- COUNTDOWN MECHANISM ------------------------------- # 
def countdown(count):
    global reps

    count_min = math.floor(count / 60) # math.floor return largest whole number BELOW float value
    if count_min < 1:
        count_min = "00"
    elif count_min < 10:
        count_min = f"0{math.floor(count / 60)}"
    count_sec = count % 60
    if count_sec == 0:
        count_sec = "00"
    elif count_sec < 10:
        count_sec = f"0{count % 60}"
    if count >= 0: # this block actually makes numbers move
        global actual_timer
        actual_timer = window.after(1000, countdown, count - 1) # the after() function delays the execution of the passed function
        canvas.itemconfig(timer_text, text=f"{count_min}:{count_sec}") #itemconfig is used instead for config for editing canvas elements
    # if reset():
    #     canvas.itemconfig(timer_text, text="25:00")
    if reps % 2 == 0:
        cycle_counter.config(text="âœ”" * int(reps / 2)) # adds checkmark after each work timer expires
# ---------------------------- UI SETUP ------------------------------- #
window = Tk()
window.title("Pomodoro Timer")
# window.minsize(600,500)
window.config(padx=50, pady=50, bg=GREEN)

canvas = Canvas(width=200, height=224, bg=GREEN, highlightthickness=0) # creates a surface in the program where we can stack various graphical elements
tomato = PhotoImage(file="tomato.png") # tells program to extract image from file
canvas.create_image(100,112, image=tomato) # the image keyword must be the object of the PhotoImage class above. File name is no good
timer_text = canvas.create_text(103,130, text="25:00", fill="white", font=(FONT_NAME, 35, "bold"))
canvas.grid(column=1, row=1)

start_button = Button(text="Start", command=start_timer, bg=GREEN, fg=RED, highlightthickness=0, highlightbackground=GREEN)
start_button.grid(column=0, row=2)

reset_button = Button(text="Reset", command=reset, bg=GREEN, fg=RED, highlightthickness=0, highlightbackground=GREEN)
reset_button.grid(column=2, row=2,)

timer_label = Label(text="Timer", fg=YELLOW, bg=GREEN, font=(FONT_NAME, 60, "bold"))
timer_label.grid(column=1, row=0)

cycle_counter = Label(text=" ", fg=RED, bg=GREEN)
cycle_counter.grid(column=1, row=3)





window.mainloop()
